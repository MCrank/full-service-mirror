name: fsm-build

env:
  # CHART_RELEASE_NAME: full-service-mirror
  # CHART_PATH: ./chart
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

on:
  push:
    branches:
      - 'main'
      - 'develop'
      - 'release/*'
      - 'feature/*'
      - 'hotfix/*'
    # tags:
    #   - 'v*'

jobs:
  build:
    runs-on: self-hosted
    # Needs write permission for publishing release
    permissions:
      contents: write
    container:
      image: mobilecoin/rust-sgx-base:0.0.3
    strategy:
      matrix:
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # CACHE_VERSION is 'date --iso-8601=minutes' and is used to invalidate cache if needed
      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v2
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Cache Cargo
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        id: cargo_cache
        uses: actions/cache@v2
        with:
          path: |
            /opt/cargo/git
            /opt/cargo/registry/index
            /opt/cargo/registry/cache
          key: ${{ runner.os }}-${{ matrix.network }}-${{ secrets.CACHE_VERSION }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --release \
          --manifest-path full-service/Cargo.toml \
          -p mc-full-service \
          -p mc-validator-service \
          && cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p build_artifacts/${{ matrix.network }}/bin
          cp /var/tmp/*.css build_artifacts/${{ matrix.network }}
          cp -R create-release/package-${{ matrix.network }}/* build_artifacts/${{ matrix.network }}
          cp full-service/target/release/full-service build_artifacts/${{ matrix.network }}/bin/
          cp full-service/target/release/mc-validator-service build_artifacts/${{ matrix.network }}/bin/
          cp target/release/wallet-service-mirror-private build_artifacts/${{ matrix.network }}/bin/
          cp target/release/wallet-service-mirror-public build_artifacts/${{ matrix.network }}/bin/
          cp target/release/generate-rsa-keypair build_artifacts/${{ matrix.network }}/bin/

      # Create and Upload an Artifact on Push and Not a Tag
      - name: Create Artifact
        run: |
          mkdir -p artifact
          cd artifact && tar -czvf ${{ github.sha }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: full-service-mirror_${{ matrix.network }}
          path: artifact/${{ github.sha }}-${{ matrix.network }}.tar.gz

  # release:
  #   if: startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/heads/main'
  #   needs: build
  #   uses: ./.github/workflows/release.yaml
  #   with:
  #     tag: ${{ needs.build.outputs.release_semver }}

  # docker:
  #   if: startsWith(github.ref, 'refs/heads/release') || github.ref == 'refs/tags/v'
  #   needs: build
  #   uses: ./.github/workflows/docker.yaml
  #   with:
  #     tag: ${{ needs.build.outputs.release_semver }}

  # Only create a new tag if push to develop(prerelease) or main(release)
  # Will automatically bump "#patch" by default
  # Use "#major", "#minor", "#patch". "#none" in commit message to adjust bump.
  #
  # Requires mobilecoin-ci user R/W access and ACTIONS_TOKEN
  # tag:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
  #   permissions:
  #     contents: write
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #       with:
  #         fetch-depth: '0'
  #     - name: Github Tag Bump
  #       uses: anothrNick/github-tag-action@1.36.0
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
  #         CUSTOM_TAG: ${{ steps.release_semver.outputs.semver }}
  # RELEASE_BRANCHES: main
  # PRERELEASE_SUFFIX: pre
  # WITH_V: 'true'
  # DEFAULT_BUMP: patch

  # deploy-develop:
  #   if: github.ref == 'refs/heads/develop'
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine/helm
  #     options: --entrypoint /bin/sh
  #   env:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     RANCHER_CLUSTER: $${{ secrets.DEVELOP_CLUSTER }}
  #     RANCHER_CLUSTER_NAMESPACE: ${{ secrets.DEVELOP_NAMESPACE }}
  #     VALUES: ${{ secrets.TESTNET_VALUES }}
  #     TAGS: $${{ needs.docker.outputs.tags }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy
  #       run: |
  #         apk add --no-cache bash curl jq
  #         .github/workflows/helpers/rancher_deploy.sh

  # deploy-main:
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine/helm
  #     options: --entrypoint /bin/sh
  #   env:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     RANCHER_CLUSTER: ${{ secrets.DEVELOP_CLUSTER }}
  #     RANCHER_CLUSTER_NAMESPACE: ${{ secrets.MAIN_NAMESPACE }}
  #     VALUES: ${{ secrets.TESTNET_VALUES }}
  #     TAGS: ${{ needs.docker.outputs.tags }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy
  #       run: |
  #         apk add --no-cache bash curl jq
  #         .github/workflows/helpers/rancher_deploy.sh
