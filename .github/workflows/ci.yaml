name: ci

env:
  # DOCKERHUB_REPO: mobilecoin/full-service-mirror
  DOCKERHUB_REPO: mcrank/full-service-mirror
  # CHART_RELEASE_NAME: full-service-mirror
  # CHART_PATH: ./chart
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

on:
  push:
    branches:
      - 'mc-ci'
      # - 'develop'
      # - 'release/*'
    tags:
      - 'v*'

jobs:
  # test:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        network: [test, prod]
        # include:
        #   - namespace: test
        #     network: testnet
        #   - namespace: prod
        #     network: mainnet
        # - os: ubuntu-latest
        #   sccache-path: /home/runner/.cache/sccache
        # - os: macos-latest
        #   sccache-path: /Users/runner/Library/Caches/Mozilla.sccache
    # env:
    # RUSTC_WRAPPER: sccache
    # SCCACHE_CACHE_SIZE: 2G
    # SCCACHE_DIR: ${{ matrix.sccache-path }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      # - name: Install sccache (ubuntu-latest)
      #   if: matrix.os == 'ubuntu-latest'
      #   env:
      #     LINK: https://github.com/mozilla/sccache/releases/download
      #     SCCACHE_VERSION: v0.2.15
      #   run: |
      #     SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl
      #     mkdir -p $HOME/.local/bin
      #     curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
      #     mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache
      #     echo "$HOME/.local/bin" >> $GITHUB_PATH

      # - name: Install sccache (macos-latest)
      #   if: matrix.os == 'macos-latest'
      #   run: |
      #     brew update
      #     brew install sccache

      # Use the rust-toolchain for rust version
      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          override: true

      - name: Cargo Cache
        id: cargo_cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Cache Hit
        env:
          CACHE_HIT: steps.cargo_cache.outputs.cache-hit
        run: |
          echo ${CACHE_HIT}

      - name: Consensus SigStruct
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.network }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.network }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.network }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.network }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        run: |
          cargo build --release \
          --manifest-path full-service/Cargo.toml \
          -p mc-full-service \
          -p mc-validator-service \
          && \
          cargo build --release \

  # docker:
  #   if: github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tags: ${{ steps.meta.outputs.tags }}
  #   steps:
  #     - name: Checkout with submodules
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - name: Generate Docker Tags
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.DOCKERHUB_REPO }}
  #         tags: |
  #           type=ref,event=pr,priority=30
  #           type=semver,pattern=v{{version}},priority=20
  #           type=sha,priority=10

  #     - name: Setup Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         install: true

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Publish to DockerHub
  #       id: docker_publish_dockerhub
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # deploy-develop:
  #   if: github.ref == 'refs/heads/develop'
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine/helm
  #     options: --entrypoint /bin/sh
  #   env:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     RANCHER_CLUSTER: $${{ secrets.DEVELOP_CLUSTER }}
  #     RANCHER_CLUSTER_NAMESPACE: ${{ secrets.DEVELOP_NAMESPACE }}
  #     VALUES: ${{ secrets.TESTNET_VALUES }}
  #     TAGS: $${{ needs.docker.outputs.tags }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy
  #       run: |
  #         apk add --no-cache bash curl jq
  #         .github/workflows/helpers/rancher_deploy.sh

  # deploy-main:
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine/helm
  #     options: --entrypoint /bin/sh
  #   env:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     RANCHER_CLUSTER: ${{ secrets.DEVELOP_CLUSTER }}
  #     RANCHER_CLUSTER_NAMESPACE: ${{ secrets.MAIN_NAMESPACE }}
  #     VALUES: ${{ secrets.TESTNET_VALUES }}
  #     TAGS: ${{ needs.docker.outputs.tags }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy
  #       run: |
  #         apk add --no-cache bash curl jq
  #         .github/workflows/helpers/rancher_deploy.sh
