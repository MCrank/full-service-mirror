name: full-service-mirror-build

env:
  # DOCKERHUB_REPO: mobilecoin/full-service-mirror
  DOCKERHUB_REPO: mcrank/full-service-mirror
  # CHART_RELEASE_NAME: full-service-mirror
  # CHART_PATH: ./chart
  SGX_MODE: HW
  IAS_MODE: PROD
  RUST_BACKTRACE: full
  CONSENSUS_ENCLAVE_CSS: /var/tmp/consensus-enclave.css
  INGEST_ENCLAVE_CSS: /var/tmp/ingest-enclave.css

on:
  push:
    branches:
      - 'mc-ci'
      - 'main'
      - 'develop'
      - 'release/*'
    tags:
      - 'v*'

jobs:
  # test:

  build:
    runs-on: self-hosted
    # Needs write permission for publishing release
    permissions:
      contents: write
    container:
      image: mobilecoin/rust-sgx-base:0.0.3
    strategy:
      matrix:
        # os: [ubuntu-latest]
        # network: [test]
        include:
          - namespace: test
            network: testnet
          - namespace: prod
            network: mainnet

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Cache Build Binaries
        id: artifact_cache
        uses: actions/cache@v2
        with:
          path: |
            build_artifacts
          key: ${{ runner.os }}-${{ matrix.network }}-build-cargo-artifacts-${{ hashFiles('**/*.rs', '**/*.proto', '**/Cargo.toml')}}

      - name: Cache Cargo
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        id: cargo_cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.network }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Consensus SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          CONSENSUS_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep consensus-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${CONSENSUS_SIGSTRUCT_URI})

      - name: Ingest SigStruct
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          INGEST_SIGSTRUCT_URI=$(curl -s https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/production.json | grep ingest-enclave.css | awk '{print $2}' | tr -d \" | tr -d ,)
          (cd /var/tmp && curl -O https://enclave-distribution.${{ matrix.namespace }}.mobilecoin.com/${INGEST_SIGSTRUCT_URI})

      - name: Cargo Build
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          cargo build --release \
          --manifest-path full-service/Cargo.toml \
          -p mc-full-service \
          -p mc-validator-service \
          && cargo build --release

      - name: Copy binaries to cache folder
        if: steps.artifact_cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p build_artifacts/${{ matrix.network }}/bin
          cp full-service/target/release/full-service build_artifacts/${{ matrix.network }}/bin/
          cp full-service/target/release/mc-validator-service build_artifacts/${{ matrix.network }}/bin/
          cp target/release/wallet-service-mirror-private build_artifacts/${{ matrix.network }}/bin/
          cp target/release/wallet-service-mirror-public build_artifacts/${{ matrix.network }}/bin/

      # Create and Upload an Action Artifact on Push and Not a Tag
      - name: Create Artifact
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p artifact
          cp -R create-release/package-${{ matrix.network }}/* build_artifacts/${{ matrix.network }}
          cd artifact && tar -czvf ${{ github.sha }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      - name: Upload Artifact
        if: github.event_name == 'push' && !startsWith(github.ref, 'refs/tags/v')
        uses: actions/upload-artifact@v2
        with:
          name: full-service-mirror_${{ matrix.network }}
          path: artifact/${{ github.sha }}-${{ matrix.network }}.tar.gz

      - name: Get the Tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: tag
        uses: dawidd6/action-get-tag@v1

      # Create and Upload a GH Release if it is a tag
      - name: Create Release
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          mkdir -p release
          cp -R create-release/package-${{ matrix.network }}/* build_artifacts/${{ matrix.network }}
          cd release && tar -czvf ${{ steps.tag.outputs.tag }}-${{ matrix.network }}.tar.gz -C ../build_artifacts/${{ matrix.network }}/ .

      # Does the tag have the "pre" key word in it? Will mark it as prerelease
      - name: Is Prerelease
        shell: bash
        id: prerelease
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          if [[ $GITHUB_REF == *"pre"* ]]; then
            echo ::set-output name=value::true
          else
            echo ::set-output name=value::false
          fi

      - name: Upload Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          prerelease: ${{ steps.prerelease.outputs.value }}
          files: release/${{ steps.tag.outputs.tag }}-${{ matrix.network }}.tar.gz

  # docker:
  #   if: github.event_name != 'pull_request'
  #   runs-on: ubuntu-latest
  #   outputs:
  #     tags: ${{ steps.meta.outputs.tags }}
  #   steps:
  #     - name: Checkout with submodules
  #       uses: actions/checkout@v2
  #       with:
  #         submodules: recursive

  #     - name: Generate Docker Tags
  #       id: meta
  #       uses: docker/metadata-action@v3
  #       with:
  #         images: ${{ env.DOCKERHUB_REPO }}
  #         tags: |
  #           type=ref,event=pr,priority=30
  #           type=semver,pattern=v{{version}},priority=20
  #           type=sha,priority=10

  #     - name: Setup Docker Buildx
  #       id: buildx
  #       uses: docker/setup-buildx-action@v1
  #       with:
  #         install: true

  #     - name: Login to DockerHub
  #       uses: docker/login-action@v1
  #       with:
  #         username: ${{ secrets.DOCKERHUB_USERNAME }}
  #         password: ${{ secrets.DOCKERHUB_PASSWORD }}

  #     - name: Publish to DockerHub
  #       id: docker_publish_dockerhub
  #       uses: docker/build-push-action@v2
  #       with:
  #         context: .
  #         push: true
  #         tags: ${{ steps.meta.outputs.tags }}
  #         cache-from: type=gha
  #         cache-to: type=gha,mode=max

  # deploy-develop:
  #   if: github.ref == 'refs/heads/develop'
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine/helm
  #     options: --entrypoint /bin/sh
  #   env:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     RANCHER_CLUSTER: $${{ secrets.DEVELOP_CLUSTER }}
  #     RANCHER_CLUSTER_NAMESPACE: ${{ secrets.DEVELOP_NAMESPACE }}
  #     VALUES: ${{ secrets.TESTNET_VALUES }}
  #     TAGS: $${{ needs.docker.outputs.tags }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy
  #       run: |
  #         apk add --no-cache bash curl jq
  #         .github/workflows/helpers/rancher_deploy.sh

  # deploy-main:
  #   if: startsWith(github.ref, 'refs/tags/')
  #   needs: docker
  #   runs-on: ubuntu-latest
  #   container:
  #     image: alpine/helm
  #     options: --entrypoint /bin/sh
  #   env:
  #     RANCHER_URL: ${{ secrets.RANCHER_URL }}
  #     RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
  #     RANCHER_CLUSTER: ${{ secrets.DEVELOP_CLUSTER }}
  #     RANCHER_CLUSTER_NAMESPACE: ${{ secrets.MAIN_NAMESPACE }}
  #     VALUES: ${{ secrets.TESTNET_VALUES }}
  #     TAGS: ${{ needs.docker.outputs.tags }}
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - name: Deploy
  #       run: |
  #         apk add --no-cache bash curl jq
  #         .github/workflows/helpers/rancher_deploy.sh
